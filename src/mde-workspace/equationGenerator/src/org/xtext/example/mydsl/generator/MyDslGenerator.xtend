/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.common.util.URI
import java.io.File
import java.io.FileWriter
import PhysicalEpidemicRoot.PhysicalEpidemicRootPackage
import PhysicalEpidemicRoot.PhysicalFlow
import PhysicalEpidemicRoot.Label
import PhysicalEpidemicRoot.PhysicalCompartment

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
	


def static void main(String[] args) {
	
	new MyDslGenerator().EquationGenerator("physical2.xmi");
 	
	new MyDslGenerator().CompartmentsGenerator("physical2.xmi");
}

def EquationGenerator(String xmiFileName){
	EMFInitialization();
	
	
	val resrcSet = new ResourceSetImpl();
	val fileURL = URI.createURI(xmiFileName);
	val resource= resrcSet.getResource(fileURL, true);
	
	val outputObj = new File("src-gen/equations.txt");
	val fileWriter = new FileWriter("src-gen/equations.txt");
	
	
	fileWriter.write(
		'''
	«FOR flow: resource.allContents.filter(PhysicalFlow).toIterable()»
	
	(* [«FOR srcCompartment: flow.from.labels»«srcCompartment.name»«IF srcCompartment !== flow.from.labels.last», «ENDIF»«ENDFOR»]«IF flow.equationtemplate.sourceParameters !== null && flow.equationtemplate.contactParameters === null» (parameter «flow.equationtemplate.sourceParameters» «flow.id» ) )
	«ENDIF»
	«IF flow.equationtemplate.sourceParameters !== null && flow.equationtemplate.contactParameters !== null»
	 (parameter «flow.equationtemplate.sourceParameters» «flow.id» ) (sumproduct [«flow.equationtemplate.contactCompartment»] (parameter «flow.equationtemplate.contactParameters» «flow.id» [«flow.equationtemplate.contactCompartment»]) ))
	«ENDIF»
	«IF flow.equationtemplate.sourceParameters === null && flow.equationtemplate.contactParameters !== null»
    (sumproduct [«flow.equationtemplate.contactCompartment»] (parameter «flow.equationtemplate.contactParameters» «flow.id» [«flow.equationtemplate.contactCompartment»]) ))
	«ENDIF»
	[«FOR toCompartment: flow.from.labels»«toCompartment.name»,«ENDFOR»]
	[«FOR toCompartment: flow.to.labels»«toCompartment.name»,«ENDFOR»]
	«flow.id»
	
	«ENDFOR»
		'''
	) 
	

	
	fileWriter.close();
	System.out.println("SUCESS EQUATION GENERATION!")
	
}


def CompartmentsGenerator(String xmiFileName){
	EMFInitialization();
	
	
	val resrcSet = new ResourceSetImpl();
	val fileURL = URI.createURI(xmiFileName);
	val resource= resrcSet.getResource(fileURL, true);
	
	val outputObj = new File("src-gen/compartments.txt");
	val fileWriter = new FileWriter("src-gen/compartments.txt");
	
	
	fileWriter.write(
		'''
		«FOR compartment: resource.allContents.filter(PhysicalCompartment).toIterable()»
		[«FOR label: compartment.labels»«label.name»«IF label !== compartment.labels.last», «ENDIF»«ENDFOR»]
		«ENDFOR»
	
		'''
	) 
	

	
	fileWriter.close();
	System.out.println("SUCCESS COMPARTMENTS GENERATION!")
	
}

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}
	
	
	
	def EMFInitialization() {
    	EPackage.Registry.INSTANCE.put(PhysicalEpidemicRootPackage.eINSTANCE.nsURI, PhysicalEpidemicRootPackage.eINSTANCE)
    	Resource.Factory.Registry.INSTANCE.extensionToFactoryMap.put("xmi", new XMIResourceFactoryImpl);
    }
    
    
    
}
