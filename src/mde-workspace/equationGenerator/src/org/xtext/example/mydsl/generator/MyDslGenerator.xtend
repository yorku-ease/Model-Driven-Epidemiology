/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.ecore.EPackage
//import Latex.LatexPackage
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.common.util.URI
import java.io.File
import java.io.FileWriter
//import Latex.Section
//import Latex.SubSection
//import Latex.SubSubSection
//import Latex.Paragraph
//import Latex.Document
import PhysicalEpidemicRoot.PhysicalEpidemicRootPackage
import PhysicalEpidemicRoot.PhysicalFlow
import PhysicalEpidemicRoot.Label

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
	


def static void main(String[] args) {
	new MyDslGenerator().myDoGenerate("physical2.xmi");
 	
	
}

def myDoGenerate(String xmiFileName){
	EMFInitialization();
	
	
	val resrcSet = new ResourceSetImpl();
	val fileURL = URI.createURI(xmiFileName);
	val resource= resrcSet.getResource(fileURL, true);
	
	val outputObj = new File("src-gen/equations.txt");
	val fileWriter = new FileWriter("src-gen/equations.txt");
	
	generateParametersForFlows(resource);
	
	fileWriter.write(
		'''
	«FOR flow: resource.allContents.filter(PhysicalFlow).toIterable()»
	(* [«FOR toCompartment: flow.from.labels»«toCompartment.name»,«ENDFOR»])
	(parameter «flow.equationtemplate.sourceParameters» «flow.id» )
	(* [«FOR toCompartment: flow.from.labels»«toCompartment.name»,«ENDFOR»])
	(* [«FOR toCompartment: flow.to.labels»«toCompartment.name»,«ENDFOR»])
	«flow.id»
	
	«ENDFOR»
		'''
	) 
	

	
	fileWriter.close();
	System.out.println("SUCCESSSSSful generation!")
	
}

def generateParametersForFlows(Resource resource){
	// [Age,Alive,Child,HIV,HIV-TB-Coinfection,I-HIV,M,Mortality,S-TB,Sex,Tuberculosis]
	val labels = "";
	val labelsString = "["+labels+"]";
	
	System.out.println("Highhh:"+resource.allContents.filter(PhysicalFlow))
	System.out.println("tea:"+resource.contents.filter(PhysicalFlow))
	for (PhysicalFlow flow :resource.allContents.filter(PhysicalFlow).toIterable() ){
		System.out.println("Skkyyy:"+flow.to.labels);
		for (Label label:flow.to.labels ){
			
//			labels += label.name
		}
	}
}
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}
	
	
	
	def EMFInitialization() {
    	EPackage.Registry.INSTANCE.put(PhysicalEpidemicRootPackage.eINSTANCE.nsURI, PhysicalEpidemicRootPackage.eINSTANCE)
    	Resource.Factory.Registry.INSTANCE.extensionToFactoryMap.put("xmi", new XMIResourceFactoryImpl);
    }
    
    
    
}
