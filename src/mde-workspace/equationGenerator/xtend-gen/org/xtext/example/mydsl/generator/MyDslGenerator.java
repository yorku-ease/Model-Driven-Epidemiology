/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.generator;

import PhysicalEpidemicRoot.Label;
import PhysicalEpidemicRoot.PhysicalEpidemicRootPackage;
import PhysicalEpidemicRoot.PhysicalFlow;
import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import java.io.File;
import java.io.FileWriter;
import java.util.Iterator;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  public static void main(final String[] args) {
    new MyDslGenerator().myDoGenerate("physical2.xmi");
  }

  public void myDoGenerate(final String xmiFileName) {
    try {
      this.EMFInitialization();
      final ResourceSetImpl resrcSet = new ResourceSetImpl();
      final URI fileURL = URI.createURI(xmiFileName);
      final Resource resource = resrcSet.getResource(fileURL, true);
      final File outputObj = new File("src-gen/equations.txt");
      final FileWriter fileWriter = new FileWriter("src-gen/equations.txt");
      this.generateParametersForFlows(resource);
      StringConcatenation _builder = new StringConcatenation();
      {
        Iterable<PhysicalFlow> _iterable = IteratorExtensions.<PhysicalFlow>toIterable(Iterators.<PhysicalFlow>filter(resource.getAllContents(), PhysicalFlow.class));
        for(final PhysicalFlow flow : _iterable) {
          _builder.append("(* [");
          {
            EList<Label> _labels = flow.getFrom().getLabels();
            for(final Label toCompartment : _labels) {
              String _name = toCompartment.getName();
              _builder.append(_name);
              _builder.append(",");
            }
          }
          _builder.append("])");
          _builder.newLineIfNotEmpty();
          _builder.append("(parameter ");
          String _sourceParameters = flow.getEquationtemplate().getSourceParameters();
          _builder.append(_sourceParameters);
          _builder.append(" ");
          String _id = flow.getId();
          _builder.append(_id);
          _builder.append(" )");
          _builder.newLineIfNotEmpty();
          _builder.append("(* [");
          {
            EList<Label> _labels_1 = flow.getFrom().getLabels();
            for(final Label toCompartment_1 : _labels_1) {
              String _name_1 = toCompartment_1.getName();
              _builder.append(_name_1);
              _builder.append(",");
            }
          }
          _builder.append("])");
          _builder.newLineIfNotEmpty();
          _builder.append("(* [");
          {
            EList<Label> _labels_2 = flow.getTo().getLabels();
            for(final Label toCompartment_2 : _labels_2) {
              String _name_2 = toCompartment_2.getName();
              _builder.append(_name_2);
              _builder.append(",");
            }
          }
          _builder.append("])");
          _builder.newLineIfNotEmpty();
          String _id_1 = flow.getId();
          _builder.append(_id_1);
          _builder.newLineIfNotEmpty();
          _builder.newLine();
        }
      }
      fileWriter.write(_builder.toString());
      fileWriter.close();
      System.out.println("SUCCESSSSSful generation!");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  public void generateParametersForFlows(final Resource resource) {
    final String labels = "";
    final String labelsString = (("[" + labels) + "]");
    Iterator<PhysicalFlow> _filter = Iterators.<PhysicalFlow>filter(resource.getAllContents(), PhysicalFlow.class);
    String _plus = ("Highhh:" + _filter);
    System.out.println(_plus);
    Iterable<PhysicalFlow> _filter_1 = Iterables.<PhysicalFlow>filter(resource.getContents(), PhysicalFlow.class);
    String _plus_1 = ("tea:" + _filter_1);
    System.out.println(_plus_1);
    Iterable<PhysicalFlow> _iterable = IteratorExtensions.<PhysicalFlow>toIterable(Iterators.<PhysicalFlow>filter(resource.getAllContents(), PhysicalFlow.class));
    for (final PhysicalFlow flow : _iterable) {
      {
        EList<Label> _labels = flow.getTo().getLabels();
        String _plus_2 = ("Skkyyy:" + _labels);
        System.out.println(_plus_2);
        EList<Label> _labels_1 = flow.getTo().getLabels();
        for (final Label label : _labels_1) {
        }
      }
    }
  }

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }

  public Object EMFInitialization() {
    Object _xblockexpression = null;
    {
      EPackage.Registry.INSTANCE.put(PhysicalEpidemicRootPackage.eINSTANCE.getNsURI(), PhysicalEpidemicRootPackage.eINSTANCE);
      Map<String, Object> _extensionToFactoryMap = Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap();
      XMIResourceFactoryImpl _xMIResourceFactoryImpl = new XMIResourceFactoryImpl();
      _xblockexpression = _extensionToFactoryMap.put("xmi", _xMIResourceFactoryImpl);
    }
    return _xblockexpression;
  }
}
