/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.generator;

import PhysicalEpidemicRoot.Label;
import PhysicalEpidemicRoot.PhysicalCompartment;
import PhysicalEpidemicRoot.PhysicalEpidemicRootPackage;
import PhysicalEpidemicRoot.PhysicalFlow;
import com.google.common.collect.Iterators;
import java.io.File;
import java.io.FileWriter;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  public static void main(final String[] args) {
    new MyDslGenerator().EquationGenerator("physical2.xmi");
    new MyDslGenerator().CompartmentsGenerator("physical2.xmi");
  }

  public void EquationGenerator(final String xmiFileName) {
    try {
      this.EMFInitialization();
      final ResourceSetImpl resrcSet = new ResourceSetImpl();
      final URI fileURL = URI.createURI(xmiFileName);
      final Resource resource = resrcSet.getResource(fileURL, true);
      final File outputObj = new File("src-gen/equations.txt");
      final FileWriter fileWriter = new FileWriter("src-gen/equations.txt");
      StringConcatenation _builder = new StringConcatenation();
      {
        Iterable<PhysicalFlow> _iterable = IteratorExtensions.<PhysicalFlow>toIterable(Iterators.<PhysicalFlow>filter(resource.getAllContents(), PhysicalFlow.class));
        for(final PhysicalFlow flow : _iterable) {
          _builder.append("(* [");
          {
            EList<Label> _labels = flow.getFrom().getLabels();
            for(final Label srcCompartment : _labels) {
              String _name = srcCompartment.getName();
              _builder.append(_name);
              {
                Label _last = IterableExtensions.<Label>last(flow.getFrom().getLabels());
                boolean _tripleNotEquals = (srcCompartment != _last);
                if (_tripleNotEquals) {
                  _builder.append(", ");
                }
              }
            }
          }
          _builder.append("]");
          {
            if (((flow.getEquationtemplate().getSourceParameters() != null) && (flow.getEquationtemplate().getContactParameters() == null))) {
              _builder.append(" (parameter ");
              String _sourceParameters = flow.getEquationtemplate().getSourceParameters();
              _builder.append(_sourceParameters);
              _builder.append(" ");
              String _id = flow.getId();
              _builder.append(_id);
              _builder.append(" ) )");
              _builder.newLineIfNotEmpty();
            }
          }
          {
            if (((flow.getEquationtemplate().getSourceParameters() != null) && (flow.getEquationtemplate().getContactParameters() != null))) {
              _builder.append("(parameter ");
              String _sourceParameters_1 = flow.getEquationtemplate().getSourceParameters();
              _builder.append(_sourceParameters_1);
              _builder.append(" ");
              String _id_1 = flow.getId();
              _builder.append(_id_1);
              _builder.append(" ) (sumproduct [");
              String _contactCompartment = flow.getEquationtemplate().getContactCompartment();
              _builder.append(_contactCompartment);
              _builder.append("] (parameter ");
              String _contactParameters = flow.getEquationtemplate().getContactParameters();
              _builder.append(_contactParameters);
              _builder.append(" ");
              String _id_2 = flow.getId();
              _builder.append(_id_2);
              _builder.append(" [");
              String _contactCompartment_1 = flow.getEquationtemplate().getContactCompartment();
              _builder.append(_contactCompartment_1);
              _builder.append("]) ))");
              _builder.newLineIfNotEmpty();
            }
          }
          {
            if (((flow.getEquationtemplate().getSourceParameters() == null) && (flow.getEquationtemplate().getContactParameters() != null))) {
              _builder.append("(sumproduct [");
              String _contactCompartment_2 = flow.getEquationtemplate().getContactCompartment();
              _builder.append(_contactCompartment_2);
              _builder.append("] (parameter ");
              String _contactParameters_1 = flow.getEquationtemplate().getContactParameters();
              _builder.append(_contactParameters_1);
              _builder.append(" ");
              String _id_3 = flow.getId();
              _builder.append(_id_3);
              _builder.append(" [");
              String _contactCompartment_3 = flow.getEquationtemplate().getContactCompartment();
              _builder.append(_contactCompartment_3);
              _builder.append("]) ))");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("[");
          {
            EList<Label> _labels_1 = flow.getFrom().getLabels();
            for(final Label srcCompartment_1 : _labels_1) {
              String _name_1 = srcCompartment_1.getName();
              _builder.append(_name_1);
              {
                Label _last_1 = IterableExtensions.<Label>last(flow.getFrom().getLabels());
                boolean _tripleNotEquals_1 = (srcCompartment_1 != _last_1);
                if (_tripleNotEquals_1) {
                  _builder.append(", ");
                }
              }
            }
          }
          _builder.append("]");
          _builder.newLineIfNotEmpty();
          _builder.append("[");
          {
            EList<Label> _labels_2 = flow.getTo().getLabels();
            for(final Label toCompartment : _labels_2) {
              String _name_2 = toCompartment.getName();
              _builder.append(_name_2);
              {
                Label _last_2 = IterableExtensions.<Label>last(flow.getTo().getLabels());
                boolean _tripleNotEquals_2 = (toCompartment != _last_2);
                if (_tripleNotEquals_2) {
                  _builder.append(", ");
                }
              }
            }
          }
          _builder.append("]");
          _builder.newLineIfNotEmpty();
          String _id_4 = flow.getId();
          _builder.append(_id_4);
          _builder.newLineIfNotEmpty();
        }
      }
      fileWriter.write(_builder.toString());
      fileWriter.close();
      System.out.println("SUCESS EQUATION GENERATION!");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  public void CompartmentsGenerator(final String xmiFileName) {
    try {
      this.EMFInitialization();
      final ResourceSetImpl resrcSet = new ResourceSetImpl();
      final URI fileURL = URI.createURI(xmiFileName);
      final Resource resource = resrcSet.getResource(fileURL, true);
      final File outputObj = new File("src-gen/compartments.txt");
      final FileWriter fileWriter = new FileWriter("src-gen/compartments.txt");
      StringConcatenation _builder = new StringConcatenation();
      {
        Iterable<PhysicalCompartment> _iterable = IteratorExtensions.<PhysicalCompartment>toIterable(Iterators.<PhysicalCompartment>filter(resource.getAllContents(), PhysicalCompartment.class));
        for(final PhysicalCompartment compartment : _iterable) {
          _builder.append("[");
          {
            EList<Label> _labels = compartment.getLabels();
            for(final Label label : _labels) {
              String _name = label.getName();
              _builder.append(_name);
              {
                Label _last = IterableExtensions.<Label>last(compartment.getLabels());
                boolean _tripleNotEquals = (label != _last);
                if (_tripleNotEquals) {
                  _builder.append(", ");
                }
              }
            }
          }
          _builder.append("]");
          _builder.newLineIfNotEmpty();
        }
      }
      fileWriter.write(_builder.toString());
      fileWriter.close();
      System.out.println("SUCCESS COMPARTMENTS GENERATION!");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }

  public Object EMFInitialization() {
    Object _xblockexpression = null;
    {
      EPackage.Registry.INSTANCE.put(PhysicalEpidemicRootPackage.eINSTANCE.getNsURI(), PhysicalEpidemicRootPackage.eINSTANCE);
      Map<String, Object> _extensionToFactoryMap = Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap();
      XMIResourceFactoryImpl _xMIResourceFactoryImpl = new XMIResourceFactoryImpl();
      _xblockexpression = _extensionToFactoryMap.put("xmi", _xMIResourceFactoryImpl);
    }
    return _xblockexpression;
  }
}
