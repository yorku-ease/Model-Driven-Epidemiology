/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.formatting2;

import PhysicalEpidemicRoot.Label;
import PhysicalEpidemicRoot.PhysicalCompartment;
import PhysicalEpidemicRoot.PhysicalEpidemic;
import PhysicalEpidemicRoot.PhysicalFlow;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;

  protected void _format(final PhysicalEpidemic physicalEpidemic, @Extension final IFormattableDocument document) {
    EList<PhysicalCompartment> _compartments = physicalEpidemic.getCompartments();
    for (final PhysicalCompartment physicalCompartment : _compartments) {
      document.<PhysicalCompartment>format(physicalCompartment);
    }
    EList<PhysicalFlow> _flows = physicalEpidemic.getFlows();
    for (final PhysicalFlow physicalFlow : _flows) {
      document.<PhysicalFlow>format(physicalFlow);
    }
  }

  protected void _format(final PhysicalCompartment physicalCompartment, @Extension final IFormattableDocument document) {
    EList<Label> _labels = physicalCompartment.getLabels();
    for (final Label label : _labels) {
      document.<Label>format(label);
    }
  }

  public void format(final Object physicalCompartment, final IFormattableDocument document) {
    if (physicalCompartment instanceof XtextResource) {
      _format((XtextResource)physicalCompartment, document);
      return;
    } else if (physicalCompartment instanceof PhysicalCompartment) {
      _format((PhysicalCompartment)physicalCompartment, document);
      return;
    } else if (physicalCompartment instanceof PhysicalEpidemic) {
      _format((PhysicalEpidemic)physicalCompartment, document);
      return;
    } else if (physicalCompartment instanceof EObject) {
      _format((EObject)physicalCompartment, document);
      return;
    } else if (physicalCompartment == null) {
      _format((Void)null, document);
      return;
    } else if (physicalCompartment != null) {
      _format(physicalCompartment, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(physicalCompartment, document).toString());
    }
  }
}
