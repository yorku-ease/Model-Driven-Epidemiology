/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.serializer;

import PhysicalEpidemicRoot.EquationTemplate;
import PhysicalEpidemicRoot.Label;
import PhysicalEpidemicRoot.PhysicalCompartment;
import PhysicalEpidemicRoot.PhysicalEpidemic;
import PhysicalEpidemicRoot.PhysicalEpidemicRootPackage;
import PhysicalEpidemicRoot.PhysicalFlow;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PhysicalEpidemicRootPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PhysicalEpidemicRootPackage.EQUATION_TEMPLATE:
				sequence_EquationTemplate(context, (EquationTemplate) semanticObject); 
				return; 
			case PhysicalEpidemicRootPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case PhysicalEpidemicRootPackage.PHYSICAL_COMPARTMENT:
				sequence_PhysicalCompartment(context, (PhysicalCompartment) semanticObject); 
				return; 
			case PhysicalEpidemicRootPackage.PHYSICAL_EPIDEMIC:
				sequence_PhysicalEpidemic(context, (PhysicalEpidemic) semanticObject); 
				return; 
			case PhysicalEpidemicRootPackage.PHYSICAL_FLOW:
				sequence_PhysicalFlow(context, (PhysicalFlow) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     EquationTemplate returns EquationTemplate
	 *
	 * Constraint:
	 *     (sourceParameters=EString? contactParameters=EString? contactCompartment=EString?)
	 * </pre>
	 */
	protected void sequence_EquationTemplate(ISerializationContext context, EquationTemplate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Label returns Label
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_Label(ISerializationContext context, Label semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PhysicalEpidemicRootPackage.Literals.LABEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PhysicalEpidemicRootPackage.Literals.LABEL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLabelAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PhysicalCompartment returns PhysicalCompartment
	 *
	 * Constraint:
	 *     (labels+=Label labels+=Label*)?
	 * </pre>
	 */
	protected void sequence_PhysicalCompartment(ISerializationContext context, PhysicalCompartment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PhysicalEpidemic returns PhysicalEpidemic
	 *
	 * Constraint:
	 *     ((compartments+=PhysicalCompartment compartments+=PhysicalCompartment*)? (flows+=PhysicalFlow flows+=PhysicalFlow*)?)
	 * </pre>
	 */
	protected void sequence_PhysicalEpidemic(ISerializationContext context, PhysicalEpidemic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PhysicalFlow returns PhysicalFlow
	 *
	 * Constraint:
	 *     (id=EString? from=[PhysicalCompartment|EString]? to=[PhysicalCompartment|EString]? equationtemplate=EquationTemplate)
	 * </pre>
	 */
	protected void sequence_PhysicalFlow(ISerializationContext context, PhysicalFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
