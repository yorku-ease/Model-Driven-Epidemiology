-- @nsURI MainEpidemic=geodes.sms.mde
-- @nsURI PhysicalEpidemic=geodes.sms.phmde

module Epi2Phy;
create OUT : PhysicalEpidemic from IN : MainEpidemic;

rule Epidemic2PhysicalEpidemic {
	from
		mm: MainEpidemic!Epidemic
	to
		pc: PhysicalEpidemic!PhysicalEpidemic (
			compartments <- mm.compartment.getAllCompartments()
		)
}

rule UnitCompartment2PhysicalCompartment {
	from
		uc: MainEpidemic!UnitCompartment
	to
		pc: PhysicalEpidemic!PhysicalCompartment (
			name <- uc.collectLabels()
		)
}

helper context MainEpidemic!UnitCompartment  def : collectLabels() : String = 
	self.refImmediateComposite().collectLabels() + ' | ' + self.label;

helper context MainEpidemic!Group def : collectLabels() : String =
    let
        parent : MainEpidemic!AbstractCompartment = self.refImmediateComposite() in
        if parent.oclIsTypeOf(MainEpidemic!Epidemic) then
            self.label
        else
            parent.collectLabels() + ' | ' + self.label
        endif;

helper context MainEpidemic!Product def : collectLabels() : String =
    let
        parent : MainEpidemic!AbstractCompartment = self.refImmediateComposite() in
        if parent.oclIsTypeOf(MainEpidemic!Epidemic) then
            self.label
        else
            parent.collectLabels() + ' | ' + self.label
        endif;

helper context MainEpidemic!AbstractCompartment def : getAllCompartments(): OrderedSet(MainEpidemic!UnitCompartment) =
	if self.oclIsTypeOf(MainEpidemic!UnitCompartment) then
		OrderedSet{self}
	else
		self.compartments->iterate(
			child ; 
			elements : OrderedSet(MainEpidemic!UnitCompartment) = OrderedSet{} |
			if child.oclIsTypeOf(MainEpidemic!UnitCompartment) then
				elements.append(child)
			else
				elements.union(child.getAllCompartments())
			endif
		)
	endif;

-- helper context MainEpidemic!UnitCompartment def: getAllCompartments: OrderedSet(PhysicalEpidemic!PhysicalCompartment) = self;


